// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  pending
  shipped
  delivered
}

// USER MODEL
model User {
  id         Int         @id @default(autoincrement())
  name       String
  email      String      @unique
  password   String
  phone      String
  address    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  verified Boolean @default(false)

  // Relations
  cartItems  CartItem[]
  orders     Order[]
  wishlist   Wishlist[]

  @@map("users")
}

// PRODUCT MODEL
model Product {
  id           Int          @id @default(autoincrement())
  name         String
  description  String
  modelYear    Int
  price        Float
  image        String[]
  stock        Int
  rating       Int
  reviews      String[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now())

  // Foreign key
  categoryId   Int
  category     Category     @relation(fields: [categoryId], references: [id])

  // Relations
  cartItems    CartItem[]
  wishlistedBy Wishlist[]
  orderItems   OrderItem[]

  @@map("products")
}

// CATEGORY MODEL
model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]

  @@map("categories")
}

// CART ITEM MODEL
model CartItem {
  id        Int       @id @default(autoincrement())
  quantity  Int
  createdAt DateTime  @default(now())

  // Foreign keys
  userId    Int
  productId Int

  user      User      @relation(fields: [userId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@map("cart_items")
}


model Order {
  id          Int          @id @default(autoincrement())
  totalAmount Float
  status      OrderStatus  // Use the enum for the status field
  createdAt   DateTime     @default(now())

  userId      Int
  user        User         @relation(fields: [userId], references: [id])

  orderItems  OrderItem[]

  payment     Payment?     
}




model Payment {
  id              String   @id @default(cuid())
  paymentIntentId String   @unique
  amount          Int
  currency        String
  status          String
  createdAt       DateTime @default(now())

  orderId         Int      @unique    
  order           Order    @relation(fields: [orderId], references: [id])

  userId          Int?
}



// ORDER ITEM MODEL â€” NEW!
model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float

  // Foreign keys
  orderId   Int
  productId Int

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// WISHLIST MODEL
model Wishlist {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())

  // Foreign keys
  userId    Int
  productId Int

  user      User      @relation(fields: [userId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@map("wishlist")
}
